package SamplePackage;

import java.io.*;
import java.util.*;

public class Sample1 {

	private static HashMap<Integer, String> input=null;
	public static void main(String[] args) throws IOException {
		
		input = new HashMap<Integer,String>();
		String input_file="/Users/bisbiswa/Documents/highPeak/sample_input.txt";
		String output_file="/Users/bisbiswa/Documents/highPeak/sample_output.txt";
		int[] sorted_price = populateMap(input_file);
		int m = 2,lowest_low=-1,lowest_diff=Integer.MAX_VALUE;
		for(int i=0;i+m-1<sorted_price.length;i++)
		{
			if(sorted_price[i+m-1] - sorted_price[i]  <  lowest_diff)
			{
				lowest_diff = sorted_price[i+m-1] - sorted_price[i];
				lowest_low = i;
			}
		}
		
	    FileWriter fileWriter = new FileWriter(output_file);
	    PrintWriter printWriter = new PrintWriter(fileWriter);
	    printWriter.printf("Number of the employees: %d \n",m);
	    printWriter.printf("\n");
	    printWriter.printf("Here the goodies that are selected for distribution are:\n");
	    printWriter.printf("\n");
	    printWriter.printf("\n");
	    for(int j=0;j<m;j++) {
	    	
	    	printWriter.printf(input.get(sorted_price[lowest_low+j])+": "+sorted_price[lowest_low+j]+"\n");
	    }
	    printWriter.printf("\n");
	    printWriter.printf("\n");
	    printWriter.printf("And the difference between the chosen goodie with highest price and the lowest price is %d",(lowest_diff));
	    
	    printWriter.close();
		
		

	}
	public static int[] populateMap(String filename){
		
		
	    File file = new File(filename);
	    int[] temp = null;
	    Scanner sc=null;
		try {
			sc = new Scanner(file);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	    while (sc.hasNextLine()) {
	    	String ss = sc.nextLine();
	    	String itemname = ss.split(":")[0];
	    	Integer price = Integer.parseInt(ss.split(":")[1].trim());
	    	input.put(price, ss);
	    }
	    temp = new int[input.size()];
	    int i=0;
	    for (Map.Entry<Integer, String> entry : input.entrySet()) {
	        temp[i++]=entry.getKey();
	    }
	    
	    int n = temp.length;
        for (i = 0; i < n - 1; i++)
            for (int j = 0; j < n - i - 1; j++)
                if (temp[j] > temp[j + 1]) {
                    int var = temp[j];
                    temp[j] = temp[j + 1];
                    temp[j + 1] = var;
                }
        return temp;
    }
}